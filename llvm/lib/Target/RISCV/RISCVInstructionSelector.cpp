//===-- RISCVInstructionSelector.cpp -----------------------------*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file implements the targeting of the InstructionSelector class for
/// RISCV.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#include "RISCVRegisterBankInfo.h"
#include "RISCVSubtarget.h"
#include "RISCVTargetMachine.h"
#include "Utils/RISCVMatInt.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelectorImpl.h"
#include "llvm/CodeGen/GlobalISel/MachineIRBuilder.h"
#include "llvm/Support/Debug.h"

#define DEBUG_TYPE "riscv-isel"

using namespace llvm;

#define GET_GLOBALISEL_PREDICATE_BITSET
#include "RISCVGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATE_BITSET

namespace {

class RISCVInstructionSelector : public InstructionSelector {
public:
  RISCVInstructionSelector(const RISCVTargetMachine &TM,
                           const RISCVSubtarget &STI,
                           const RISCVRegisterBankInfo &RBI);

  bool select(MachineInstr &I) override;
  static const char *getName() { return DEBUG_TYPE; }

private:
  bool selectImpl(MachineInstr &I, CodeGenCoverage &CoverageInfo) const;
  bool isRegInGprBank(Register Reg, const MachineRegisterInfo &MRI) const;
  const TargetRegisterClass *getRegClass(Register Reg,
                                         const MachineRegisterInfo &MRI) const;
  bool selectCopy(MachineInstr &I, MachineRegisterInfo &MRI) const;
  bool selectConstant(MachineInstr &I, MachineRegisterInfo &MRI) const;

  const RISCVSubtarget &STI;
  const RISCVInstrInfo &TII;
  const RISCVRegisterInfo &TRI;
  const RISCVRegisterBankInfo &RBI;

  // FIXME: This is necessary because DAGISel uses "Subtarget->" and GlobalISel
  // uses "STI." in the code generated by TableGen. We need to unify the name of
  // Subtarget variable.
  const RISCVSubtarget *Subtarget = &STI;

#define GET_GLOBALISEL_PREDICATES_DECL
#include "RISCVGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_DECL

#define GET_GLOBALISEL_TEMPORARIES_DECL
#include "RISCVGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_DECL
};

} // end anonymous namespace

#define GET_GLOBALISEL_IMPL
#include "RISCVGenGlobalISel.inc"
#undef GET_GLOBALISEL_IMPL

RISCVInstructionSelector::RISCVInstructionSelector(
    const RISCVTargetMachine &TM, const RISCVSubtarget &STI,
    const RISCVRegisterBankInfo &RBI)
    : InstructionSelector(), STI(STI), TII(*STI.getInstrInfo()),
      TRI(*STI.getRegisterInfo()), RBI(RBI),

#define GET_GLOBALISEL_PREDICATES_INIT
#include "RISCVGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_INIT
#define GET_GLOBALISEL_TEMPORARIES_INIT
#include "RISCVGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_INIT
{
}

bool RISCVInstructionSelector::isRegInGprBank(
    Register Reg, const MachineRegisterInfo &MRI) const {
  return RBI.getRegBank(Reg, MRI, TRI)->getID() == RISCV::GPRRegBankID;
}

const TargetRegisterClass *
RISCVInstructionSelector::getRegClass(Register Reg,
                                      const MachineRegisterInfo &MRI) const {
  const LLT Ty = MRI.getType(Reg);
  const unsigned Size = Ty.getSizeInBits();

  if (isRegInGprBank(Reg, MRI)) {
    assert((Ty.isScalar() || Ty.isPointer()) &&
           Size == (STI.is64Bit() ? 64 : 32) &&
           "Register class not available for LLT, register bank combination");
    return &RISCV::GPRRegClass;
  }

  llvm_unreachable("Unsupported register bank.");
}
bool RISCVInstructionSelector::selectCopy(MachineInstr &I,
                                          MachineRegisterInfo &MRI) const {
  Register DstReg = I.getOperand(0).getReg();

  if (Register::isPhysicalRegister(DstReg))
    return true;

  const TargetRegisterClass *RC = getRegClass(DstReg, MRI);
  if (!RBI.constrainGenericRegister(DstReg, *RC, MRI)) {
    LLVM_DEBUG(dbgs() << "Failed to constrain " << TII.getName(I.getOpcode())
                      << " operand\n");
    return false;
  }

  return true;
}

bool RISCVInstructionSelector::selectConstant(MachineInstr &I,
                                              MachineRegisterInfo &MRI) const {
  Register DstReg = I.getOperand(0).getReg();
  int64_t Val = I.getOperand(1).getCImm()->getSExtValue();
  MachineIRBuilder MIRBuilder(I);

  RISCVMatInt::InstSeq Seq;
  RISCVMatInt::generateInstSeq(Val, STI.is64Bit(), Seq);

  // Source is X0 when used in the first instruction of the sequence.
  Register SrcReg = RISCV::X0;
  Register TmpReg;
  for (RISCVMatInt::Inst &Inst : Seq) {
    TmpReg = MRI.createVirtualRegister(&RISCV::GPRRegClass);

    MachineInstr *CurMI =
        (Inst.Opc == RISCV::LUI
             ? MIRBuilder.buildInstr(RISCV::LUI, {TmpReg}, {})
             : MIRBuilder.buildInstr(Inst.Opc, {TmpReg}, {SrcReg}))
            .addImm(Inst.Imm);

    if (!constrainSelectedInstRegOperands(*CurMI, TII, TRI, RBI))
      return false;

    SrcReg = TmpReg;
  }

  MIRBuilder.buildCopy({DstReg}, {TmpReg});
  if (!RBI.constrainGenericRegister(DstReg, RISCV::GPRRegClass, MRI))
    return false;

  return true;
}

bool RISCVInstructionSelector::select(MachineInstr &I) {
  MachineBasicBlock &MBB = *I.getParent();
  MachineFunction &MF = *MBB.getParent();
  MachineRegisterInfo &MRI = MF.getRegInfo();

  if (!isPreISelGenericOpcode(I.getOpcode())) {
    // Certain non-generic instructions also need some special handling.
    if (I.isCopy())
      return selectCopy(I, MRI);

    return true;
  }

  if (selectImpl(I, *CoverageInfo))
    return true;

  switch (I.getOpcode()) {
  case TargetOpcode::G_CONSTANT:
    if (!selectConstant(I, MRI))
      return false;

    break;
  default:
    return false;
  }
  I.eraseFromParent();
  return true;
}

namespace llvm {
InstructionSelector *
createRISCVInstructionSelector(const RISCVTargetMachine &TM,
                               RISCVSubtarget &Subtarget,
                               RISCVRegisterBankInfo &RBI) {
  return new RISCVInstructionSelector(TM, Subtarget, RBI);
}
} // end namespace llvm

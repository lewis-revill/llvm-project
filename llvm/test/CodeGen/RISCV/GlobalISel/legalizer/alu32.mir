# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -march=riscv32 -run-pass=legalizer -simplify-mir -verify-machineinstrs %s -o - \
# RUN: | FileCheck -check-prefix=RV32I %s
# RUN: llc -march=riscv32 -mattr=+m -run-pass=legalizer -simplify-mir -verify-machineinstrs %s -o - \
# RUN: | FileCheck -check-prefix=RV32IM %s

--- |

  ; Types < 32 bits exhaustively tested for add only.
  define void @add_i8() { entry: ret void }
  define void @add_i8_signext() { entry: ret void }
  define void @add_i8_zeroext() { entry: ret void }

  define void @add_i16() { entry: ret void }
  define void @add_i16_signext() { entry: ret void }
  define void @add_i16_zeroext() { entry: ret void }

  ; Operations on XLen types.
  define void @add_i32() { entry: ret void }
  define void @sub_i32() { entry: ret void }
  define void @shl_i32() { entry: ret void }
  define void @ashr_i32() { entry: ret void }
  define void @lshr_i32() { entry: ret void }
  define void @and_i32() { entry: ret void }
  define void @or_i32() { entry: ret void }
  define void @xor_i32() { entry: ret void }
  define void @mul_i32() { entry: ret void }
  define void @sdiv_i32() { entry: ret void }
  define void @srem_i32() { entry: ret void }
  define void @udiv_i32() { entry: ret void }
  define void @urem_i32() { entry: ret void }

  ; Operations on double XLen types which lower to split operations.
  define void @add_i64() { entry: ret void }
  define void @sub_i64() { entry: ret void }
  define void @mul_i64() { entry: ret void }
...
---
name:            add_i8
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: add_i8
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; RV32I: [[COPY3:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; RV32I: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY2]], [[COPY3]]
    ; RV32I: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; RV32I: $x10 = COPY [[COPY4]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: add_i8
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; RV32IM: [[COPY3:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; RV32IM: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY2]], [[COPY3]]
    ; RV32IM: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; RV32IM: $x10 = COPY [[COPY4]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %2:_(s32) = COPY $x10
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $x11
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8) = G_ADD %0, %1
    %5:_(s32) = G_ANYEXT %4(s8)
    $x10 = COPY %5(s32)
    PseudoRET implicit $x10

...
---
name:            add_i8_signext
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: add_i8_signext
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; RV32I: [[COPY3:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; RV32I: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY2]], [[COPY3]]
    ; RV32I: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; RV32I: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; RV32I: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY4]], [[C]](s32)
    ; RV32I: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; RV32I: $x10 = COPY [[ASHR]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: add_i8_signext
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; RV32IM: [[COPY3:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; RV32IM: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY2]], [[COPY3]]
    ; RV32IM: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; RV32IM: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; RV32IM: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY4]], [[C]](s32)
    ; RV32IM: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; RV32IM: $x10 = COPY [[ASHR]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %2:_(s32) = COPY $x10
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $x11
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8) = G_ADD %0, %1
    %5:_(s32) = G_SEXT %4(s8)
    $x10 = COPY %5(s32)
    PseudoRET implicit $x10

...
---
name:            add_i8_zeroext
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: add_i8_zeroext
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; RV32I: [[COPY3:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; RV32I: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY2]], [[COPY3]]
    ; RV32I: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; RV32I: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; RV32I: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY4]], [[C]]
    ; RV32I: $x10 = COPY [[AND]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: add_i8_zeroext
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; RV32IM: [[COPY3:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; RV32IM: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY2]], [[COPY3]]
    ; RV32IM: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; RV32IM: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; RV32IM: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY4]], [[C]]
    ; RV32IM: $x10 = COPY [[AND]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %2:_(s32) = COPY $x10
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $x11
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8) = G_ADD %0, %1
    %5:_(s32) = G_ZEXT %4(s8)
    $x10 = COPY %5(s32)
    PseudoRET implicit $x10

...
---
name:            add_i16
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: add_i16
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; RV32I: [[COPY3:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; RV32I: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY2]], [[COPY3]]
    ; RV32I: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; RV32I: $x10 = COPY [[COPY4]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: add_i16
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; RV32IM: [[COPY3:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; RV32IM: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY2]], [[COPY3]]
    ; RV32IM: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; RV32IM: $x10 = COPY [[COPY4]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %2:_(s32) = COPY $x10
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $x11
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16) = G_ADD %0, %1
    %5:_(s32) = G_ANYEXT %4(s16)
    $x10 = COPY %5(s32)
    PseudoRET implicit $x10

...
---
name:            add_i16_signext
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: add_i16_signext
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; RV32I: [[COPY3:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; RV32I: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY2]], [[COPY3]]
    ; RV32I: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; RV32I: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; RV32I: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY4]], [[C]](s32)
    ; RV32I: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; RV32I: $x10 = COPY [[ASHR]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: add_i16_signext
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; RV32IM: [[COPY3:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; RV32IM: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY2]], [[COPY3]]
    ; RV32IM: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; RV32IM: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; RV32IM: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY4]], [[C]](s32)
    ; RV32IM: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; RV32IM: $x10 = COPY [[ASHR]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %2:_(s32) = COPY $x10
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $x11
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16) = G_ADD %0, %1
    %5:_(s32) = G_SEXT %4(s16)
    $x10 = COPY %5(s32)
    PseudoRET implicit $x10

...
---
name:            add_i16_zeroext
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11


    ; RV32I-LABEL: name: add_i16_zeroext
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; RV32I: [[COPY3:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; RV32I: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY2]], [[COPY3]]
    ; RV32I: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; RV32I: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; RV32I: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY4]], [[C]]
    ; RV32I: $x10 = COPY [[AND]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: add_i16_zeroext
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; RV32IM: [[COPY3:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; RV32IM: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY2]], [[COPY3]]
    ; RV32IM: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; RV32IM: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; RV32IM: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY4]], [[C]]
    ; RV32IM: $x10 = COPY [[AND]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %2:_(s32) = COPY $x10
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $x11
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16) = G_ADD %0, %1
    %5:_(s32) = G_ZEXT %4(s16)
    $x10 = COPY %5(s32)
    PseudoRET implicit $x10

...
---
name:            add_i32
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: add_i32
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY1]]
    ; RV32I: $x10 = COPY [[ADD]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: add_i32
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY1]]
    ; RV32IM: $x10 = COPY [[ADD]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_ADD %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            sub_i32
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: sub_i32
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY]], [[COPY1]]
    ; RV32I: $x10 = COPY [[SUB]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: sub_i32
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY]], [[COPY1]]
    ; RV32IM: $x10 = COPY [[SUB]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_SUB %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            shl_i32
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: shl_i32
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[COPY1]](s32)
    ; RV32I: $x10 = COPY [[SHL]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: shl_i32
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[COPY1]](s32)
    ; RV32IM: $x10 = COPY [[SHL]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_SHL %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            ashr_i32
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: ashr_i32
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[COPY]], [[COPY1]](s32)
    ; RV32I: $x10 = COPY [[ASHR]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: ashr_i32
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[COPY]], [[COPY1]](s32)
    ; RV32IM: $x10 = COPY [[ASHR]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_ASHR %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            lshr_i32
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: lshr_i32
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[COPY1]](s32)
    ; RV32I: $x10 = COPY [[LSHR]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: lshr_i32
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[COPY1]](s32)
    ; RV32IM: $x10 = COPY [[LSHR]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_LSHR %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            and_i32
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: and_i32
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[COPY1]]
    ; RV32I: $x10 = COPY [[AND]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: and_i32
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[COPY1]]
    ; RV32IM: $x10 = COPY [[AND]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_AND %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            or_i32
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: or_i32
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[OR:%[0-9]+]]:_(s32) = G_OR [[COPY]], [[COPY1]]
    ; RV32I: $x10 = COPY [[OR]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: or_i32
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[OR:%[0-9]+]]:_(s32) = G_OR [[COPY]], [[COPY1]]
    ; RV32IM: $x10 = COPY [[OR]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_OR %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            xor_i32
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: xor_i32
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[COPY1]]
    ; RV32I: $x10 = COPY [[XOR]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: xor_i32
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[COPY1]]
    ; RV32IM: $x10 = COPY [[XOR]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_XOR %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            mul_i32
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: mul_i32
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: $x10 = COPY [[COPY]](s32)
    ; RV32I: $x11 = COPY [[COPY1]](s32)
    ; RV32I: PseudoCALL target-flags(riscv-call) &__mulsi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; RV32I: [[COPY2:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: $x10 = COPY [[COPY2]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: mul_i32
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY]], [[COPY1]]
    ; RV32IM: $x10 = COPY [[MUL]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_MUL %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            sdiv_i32
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: sdiv_i32
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: $x10 = COPY [[COPY]](s32)
    ; RV32I: $x11 = COPY [[COPY1]](s32)
    ; RV32I: PseudoCALL target-flags(riscv-call) &__divsi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; RV32I: [[COPY2:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: $x10 = COPY [[COPY2]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: sdiv_i32
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[SDIV:%[0-9]+]]:_(s32) = G_SDIV [[COPY]], [[COPY1]]
    ; RV32IM: $x10 = COPY [[SDIV]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_SDIV %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            srem_i32
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: srem_i32
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: $x10 = COPY [[COPY]](s32)
    ; RV32I: $x11 = COPY [[COPY1]](s32)
    ; RV32I: PseudoCALL target-flags(riscv-call) &__modsi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; RV32I: [[COPY2:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: $x10 = COPY [[COPY2]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: srem_i32
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[SREM:%[0-9]+]]:_(s32) = G_SREM [[COPY]], [[COPY1]]
    ; RV32IM: $x10 = COPY [[SREM]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_SREM %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            udiv_i32
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: udiv_i32
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: $x10 = COPY [[COPY]](s32)
    ; RV32I: $x11 = COPY [[COPY1]](s32)
    ; RV32I: PseudoCALL target-flags(riscv-call) &__udivsi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; RV32I: [[COPY2:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: $x10 = COPY [[COPY2]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: udiv_i32
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[UDIV:%[0-9]+]]:_(s32) = G_UDIV [[COPY]], [[COPY1]]
    ; RV32IM: $x10 = COPY [[UDIV]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_UDIV %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            urem_i32
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11

    ; RV32I-LABEL: name: urem_i32
    ; RV32I: liveins: $x10, $x11
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: $x10 = COPY [[COPY]](s32)
    ; RV32I: $x11 = COPY [[COPY1]](s32)
    ; RV32I: PseudoCALL target-flags(riscv-call) &__umodsi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; RV32I: [[COPY2:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: $x10 = COPY [[COPY2]](s32)
    ; RV32I: PseudoRET implicit $x10
    ; RV32IM-LABEL: name: urem_i32
    ; RV32IM: liveins: $x10, $x11
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[UREM:%[0-9]+]]:_(s32) = G_UREM [[COPY]], [[COPY1]]
    ; RV32IM: $x10 = COPY [[UREM]](s32)
    ; RV32IM: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_UREM %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            add_i64
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11, $x12, $x13

    ; RV32I-LABEL: name: add_i64
    ; RV32I: liveins: $x10, $x11, $x12, $x13
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[COPY2:%[0-9]+]]:_(s32) = COPY $x12
    ; RV32I: [[COPY3:%[0-9]+]]:_(s32) = COPY $x13
    ; RV32I: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY2]]
    ; RV32I: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD]](s32), [[COPY2]]
    ; RV32I: [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[COPY1]], [[COPY3]]
    ; RV32I: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; RV32I: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; RV32I: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY4]], [[C]]
    ; RV32I: [[ADD2:%[0-9]+]]:_(s32) = G_ADD [[ADD1]], [[AND]]
    ; RV32I: $x10 = COPY [[ADD]](s32)
    ; RV32I: $x11 = COPY [[ADD2]](s32)
    ; RV32I: PseudoRET implicit $x10, implicit $x11
    ; RV32IM-LABEL: name: add_i64
    ; RV32IM: liveins: $x10, $x11, $x12, $x13
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[COPY2:%[0-9]+]]:_(s32) = COPY $x12
    ; RV32IM: [[COPY3:%[0-9]+]]:_(s32) = COPY $x13
    ; RV32IM: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY2]]
    ; RV32IM: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD]](s32), [[COPY2]]
    ; RV32IM: [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[COPY1]], [[COPY3]]
    ; RV32IM: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; RV32IM: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; RV32IM: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY4]], [[C]]
    ; RV32IM: [[ADD2:%[0-9]+]]:_(s32) = G_ADD [[ADD1]], [[AND]]
    ; RV32IM: $x10 = COPY [[ADD]](s32)
    ; RV32IM: $x11 = COPY [[ADD2]](s32)
    ; RV32IM: PseudoRET implicit $x10, implicit $x11
    %2:_(s32) = COPY $x10
    %3:_(s32) = COPY $x11
    %4:_(s32) = COPY $x12
    %5:_(s32) = COPY $x13
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %6:_(s64) = G_ADD %0, %1
    %7:_(s32), %8:_(s32) = G_UNMERGE_VALUES %6(s64)
    $x10 = COPY %7(s32)
    $x11 = COPY %8(s32)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            sub_i64
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11, $x12, $x13

    ; RV32I-LABEL: name: sub_i64
    ; RV32I: liveins: $x10, $x11, $x12, $x13
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[COPY2:%[0-9]+]]:_(s32) = COPY $x12
    ; RV32I: [[COPY3:%[0-9]+]]:_(s32) = COPY $x13
    ; RV32I: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY]], [[COPY2]]
    ; RV32I: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[COPY2]]
    ; RV32I: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[COPY1]], [[COPY3]]
    ; RV32I: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; RV32I: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; RV32I: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY4]], [[C]]
    ; RV32I: [[SUB2:%[0-9]+]]:_(s32) = G_SUB [[SUB1]], [[AND]]
    ; RV32I: $x10 = COPY [[SUB]](s32)
    ; RV32I: $x11 = COPY [[SUB2]](s32)
    ; RV32I: PseudoRET implicit $x10, implicit $x11
    ; RV32IM-LABEL: name: sub_i64
    ; RV32IM: liveins: $x10, $x11, $x12, $x13
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[COPY2:%[0-9]+]]:_(s32) = COPY $x12
    ; RV32IM: [[COPY3:%[0-9]+]]:_(s32) = COPY $x13
    ; RV32IM: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY]], [[COPY2]]
    ; RV32IM: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[COPY2]]
    ; RV32IM: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[COPY1]], [[COPY3]]
    ; RV32IM: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; RV32IM: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; RV32IM: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY4]], [[C]]
    ; RV32IM: [[SUB2:%[0-9]+]]:_(s32) = G_SUB [[SUB1]], [[AND]]
    ; RV32IM: $x10 = COPY [[SUB]](s32)
    ; RV32IM: $x11 = COPY [[SUB2]](s32)
    ; RV32IM: PseudoRET implicit $x10, implicit $x11
    %2:_(s32) = COPY $x10
    %3:_(s32) = COPY $x11
    %4:_(s32) = COPY $x12
    %5:_(s32) = COPY $x13
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %6:_(s64) = G_SUB %0, %1
    %7:_(s32), %8:_(s32) = G_UNMERGE_VALUES %6(s64)
    $x10 = COPY %7(s32)
    $x11 = COPY %8(s32)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            mul_i64
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $x10, $x11, $x12, $x13

    ; RV32I-LABEL: name: mul_i64
    ; RV32I: liveins: $x10, $x11, $x12, $x13
    ; RV32I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: [[COPY2:%[0-9]+]]:_(s32) = COPY $x12
    ; RV32I: [[COPY3:%[0-9]+]]:_(s32) = COPY $x13
    ; RV32I: $x10 = COPY [[COPY]](s32)
    ; RV32I: $x11 = COPY [[COPY1]](s32)
    ; RV32I: $x12 = COPY [[COPY2]](s32)
    ; RV32I: $x13 = COPY [[COPY3]](s32)
    ; RV32I: PseudoCALL target-flags(riscv-call) &__muldi3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; RV32I: [[COPY4:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32I: [[COPY5:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32I: $x10 = COPY [[COPY4]](s32)
    ; RV32I: $x11 = COPY [[COPY5]](s32)
    ; RV32I: PseudoRET implicit $x10, implicit $x11
    ; RV32IM-LABEL: name: mul_i64
    ; RV32IM: liveins: $x10, $x11, $x12, $x13
    ; RV32IM: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; RV32IM: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; RV32IM: [[COPY2:%[0-9]+]]:_(s32) = COPY $x12
    ; RV32IM: [[COPY3:%[0-9]+]]:_(s32) = COPY $x13
    ; RV32IM: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY]], [[COPY2]]
    ; RV32IM: [[MUL1:%[0-9]+]]:_(s32) = G_MUL [[COPY1]], [[COPY2]]
    ; RV32IM: [[MUL2:%[0-9]+]]:_(s32) = G_MUL [[COPY]], [[COPY3]]
    ; RV32IM: [[UMULH:%[0-9]+]]:_(s32) = G_UMULH [[COPY]], [[COPY2]]
    ; RV32IM: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[MUL1]], [[MUL2]]
    ; RV32IM: [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[ADD]], [[UMULH]]
    ; RV32IM: $x10 = COPY [[MUL]](s32)
    ; RV32IM: $x11 = COPY [[ADD1]](s32)
    ; RV32IM: PseudoRET implicit $x10, implicit $x11
    %2:_(s32) = COPY $x10
    %3:_(s32) = COPY $x11
    %4:_(s32) = COPY $x12
    %5:_(s32) = COPY $x13
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %6:_(s64) = G_MUL %0, %1
    %7:_(s32), %8:_(s32) = G_UNMERGE_VALUES %6(s64)
    $x10 = COPY %7(s32)
    $x11 = COPY %8(s32)
    PseudoRET implicit $x10, implicit $x11

...
